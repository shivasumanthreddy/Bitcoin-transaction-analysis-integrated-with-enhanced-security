This directory contains routines and programs to generate succinct ZK proofs for statements relative to deletion of illecit content from Bitcoin transactions.

To test the code, you need to install Isekai, a compiler that converts C/C++ programs into arithmetic/Boolean circuits and allows to prove and verify correct program execution using several ZK libraries. In particular, for this tests our choice is Aurora.


## Installing Iskeai

Start by cloning isekai to a local directory. We recommend to retrieve also the the submodules:

```
$ git clone --recurse-submodules https://github.com/sikoba/isekai.git 	
```

### 1. Install Crystal and required packages

The project is written in Crystal language. Follow the [Official instructions](https://crystal-lang.org/docs/installation/) for instructions how to install Crystal lang. 

Make sure to install the recommended packages, even though only libgmp-dev is actually required for isekai.

Then install the following additional packages required by isekai:

```
$ sudo apt install clang-7
$ sudo apt install libclang-7-dev
$ sudo apt-get install libprocps-dev
$ shards install
```
### 2. Apply libclang patch

The project depends on several libclang patches which are not yet merged in the libclang (https://www.mail-archive.com/cfe-commits@cs.uiuc.edu/msg95414.html,
http://lists.llvm.org/pipermail/cfe-commits/Week-of-Mon-20140428/104048.html)

Applying the patch is done from the docker subdirectory:


```
$ cd docker/
$ cp bin/libclang.so.gz /tmp/libclang.so.gz
$ gzip -d /tmp/libclang.so.gz
$ sudo cp /tmp/libclang.so /usr/lib/x86_64-linux-gnu/libclang-7.so.1
$ sudo cp /tmp/libclang.so /usr/lib/libclang.so.7
$ cd ..
```

### 3. Install isekai

The project comes with the Makefile and in order to compile the project, running `make` will be enough. That will create the `isekai` binary file in the current directory. To run tests `make test` should be used.

Alternatively, `crystal build src/isekai.cr` or `crystal test` can be used.


### 4. Compiling libsnarc

libsnarc is a library which provides a C-wrapper over libsnark and libiop. The library is already included so you do not need to compile it. However, we have noticed errors on some systems, which are fixed by recompiling the library. Please make sure you retrieved the submodules recursively before compiling this library.


```
$ sudo apt-get install libsodium-dev
$ cd lib/libsnarc
$ mkdir build
$ cd build & cmake ..
$ make
```

After having built libsnarc, you need to (re-)build isekai :
```
go to isekai main directory
$ make --always-make
```


## How to use our code
Our code assumes that isekai is installed in some directory (change the .sh scripts to point to the correct directory)

The proofdeletion.c programs has to be compiled as g++ -o proofdeletions proofdeletions.cpp -fpermissive

The program proofdeletions can be executed with the following parameters:

./proofdeletions W length start1 end1 ... start_length end_length deleted_data_length input_size

generates the R1CS with respect to transactions of ''input_size bytes`` for circuits of max ''length`` bytes that have been deleted starting from the indices ''start[i]`` to the index ''end[i]``, i=1,...,length.
The parameter ''deleted_data_length`` represents the max length of a string that can be deleted from a transaction of maximum size=''length``.
It generates the files hash.j1 from the file hash.cpp that contains the code that will be compiled into the R1CS.
It also generates the input files hash.bc.in, hash.j1.in containing the input for the prover (that includes the digest of the hash).
It takes the transaction from the file transaction and the deleted_data from the file deleted_data

./proofdeletions C length deleted_data_length
similar as before except that it just generates the R1CS file and not also the .in files. Indeed, this command does not read the files ''transaction`` and ''deleted_data`` and can be executed both from prover and verifier.


./proofdeletions H length start1 end1 ... start_length end_length deleted_data_length input_size
computes the digest of the file string in the file ''transaction` after replacing in it the string in the file deleted_data from the indices start[i] to the indices end[i], i=1,...,length and considering only the first ''input_size`` bytes of the file.

./proofdeletions S length1 start1 end1 ... start_length end_length  input_size
generates only the input file hashverif.j1.in for the verifier.
This procedure assumes the file digest has been already generated.
The file hashverif.j1.in generated by the latter procedure is different from the file hash.j1.in in that hash.j1.in includes both input, witness and output of the circuit whereas hashverif.j1.in includes only input and output of the circuit.

./proofdeletions P length start1 end1 ... start_length end_length deleted_data_length  input_size
computes the proof using statement taken from the file ''transaction`` + the indices ''start[i]`` and ''end[i]``, i=1,...,length, the length of the deleted data ''deleted_data_length`` and the input size ''input_size``.

./proofdeletions V
verifies the proof computed by prover using the input file hashverifj1.in computed as described before.

TODO: the procedure Prover recomputes the circuit each time. This is because the procedure GenerateStatementWitness can only create a hash.bc.in file (a raw input file) and not a R1CS input file so we need the scripts to recompute the R1CS file given from the raw input file. We need a procedure that computes the j1.in file for the prover given the public and secret strings.
